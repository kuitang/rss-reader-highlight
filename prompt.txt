Build an RSS reader based on https://monsterui.answer.ai/mail/code. Navigate the documentation website to understand the       system, particular the llm context files on https://monsterui.answer.ai/. IMPORTANT: Download the ai context text files to this directory and read them. Use deepwiki mcp for API questions but also just read the github code directly. Make your code as minimal and as close to the examples as possible. Do not guess about the API; make sure you read documentation.

Specifics for the rss reader: Email => Feeds. Instead of "Select an Option", this input is a box to enter an rss url and a + button to add. The left bar has two sections: first is just a list of RSS feeds the user added. Bottom is a list of the user's folders. Add a button there to "Add Folder". Email => "Feeds" "Inbox" => Name of feed. Next to the feed name, in smaller text, use human readable statements (use a library) to say e.g. "last updated x minutes ago". Keep the UI for "All Posts" and "Unread". Adapt or remove the other email fields, i.e. there is no "Reply", and instead of contact infos, show the title of the post and permalink. Remove all the navigation icons at the top of the email. Just have three: Star to save to favorites, and a folder which pops up a modal for the user to select a folder, and a mark unread button. Use the appropriate icons and tooltips for each. When a user clicks a post, it automatically gets marked as read. Users also have the option to delete a feed they added, but it only unsubscribes them from the feed--it does not remove the system's copy of the feed.

Autopopulate the feeds with the hacker news rss and the reddit all posts rss and wsj markets.

Backend: Use fasthtml sessions. There are no accounts or logins; each new browser session starts a new one. Use the stdlib     sqlite3 library and plain sql. Design a normalized SQL schema to represent this concept: feeds are global, but read/unread   markings and folders/favorites are per session (user). Remember, one session = one user. Devise a media storage schema for the feeds. NOTE: Feeds can be either RSS or Atom. Use filesystem metadata to track last edit time. Whenever we reload the page,update all feed that are older than 1 min. Use the appropriate Etags/last-sent/standard HTTP headers to avoid abuse.

The entire application uses HTML so you should be able to test extensively using a client library like httpx. Write integration tests using httpx and pytest. Nevertheless also use Playwright, both the mcp server to poke around the app and then use Playwright scripts to automate testing. Test all of the different state changes, i.e. adding a feed, marking read/unread, adding to folder, etc. In the integration tests, combine visual poking with DB queries if this is possible in Playwright.

Ask me questions if anything is unclear.